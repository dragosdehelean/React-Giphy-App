{"version":3,"sources":["components/GifItem.js","components/GifList.js","components/SearchBar.js","App.js","index.js"],"names":["GiftItem","_ref","gif","inCollection","toggleCollection","label","labelClass","react_default","a","createElement","className","src","images","fixed_width","url","alt","title","data-toggle","type","checked","onChange","username","id","rating","import_datetime","GiftList","gifs","isInCollection","onToggleCollection","map","GifItem","key","SearchBar","searchTerm","onSearchChange","console","log","placeholder","value","App","state","myCollection","_this","indexOf","handleToggleCollection","setState","prevState","filter","item","concat","Object","toConsumableArray","handleOnSearchChange","ev","preventDefault","target","fetch","then","res","json","data","catch","error","_this2","this","components_SearchBar","GifList","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"2MAsDeA,EAnDE,SAAAC,GAA6C,IAA1CC,EAA0CD,EAA1CC,IAAKC,EAAqCF,EAArCE,aAAcC,EAAuBH,EAAvBG,iBAE/BC,EAAQF,EAAe,2BAA6B,sBACpDG,EAAaH,EAAe,0CAA4C,4BAG9E,OACEI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,OACEC,UAAU,yBACVC,IAAKT,EAAIU,OAAOC,YAAYC,IAC5BC,IAAKb,EAAIc,MACTA,MAAOd,EAAIc,QAEbT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBO,cAAY,WAC5CV,EAAAC,EAAAC,cAAA,SAAOC,UAAWJ,GAChBC,EAAAC,EAAAC,cAAA,SACES,KAAK,WACLC,QAAShB,EACTiB,SAAUhB,IAGXC,KAIPE,EAAAC,EAAAC,cAAA,MAAIC,UAAU,+BACXR,EAAImB,SACHd,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBACZH,EAAAC,EAAAC,cAAA,2BADF,IAC8BP,EAAImB,UAEhC,KAEJd,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBACZH,EAAAC,EAAAC,cAAA,qBADF,IACwBP,EAAIoB,GAD5B,MACkCf,EAAAC,EAAAC,cAAA,yBADlC,IAC4DP,EAAIqB,QAEhEhB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBACZH,EAAAC,EAAAC,cAAA,kCADF,IACqCP,EAAIsB,oBCdlCC,EAvBE,SAAAxB,GAAkD,IAA/CyB,EAA+CzB,EAA/CyB,KAAMC,EAAyC1B,EAAzC0B,eAAgBC,EAAyB3B,EAAzB2B,mBACxC,OAEIrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACZgB,EAAKG,IAAI,SAAA3B,GAAG,OACXK,EAAAC,EAAAC,cAACqB,EAAD,CACEC,IAAK7B,EAAIoB,GACTpB,IAAKA,EACLC,aAAcwB,EAAezB,EAAIoB,IACjClB,iBAAkB,kBAAMwB,EAAmB1B,UCwBxC8B,EAlCG,SAAA/B,GAAoC,IAAjCgC,EAAiChC,EAAjCgC,WAAYC,EAAqBjC,EAArBiC,eAE/B,OADAC,QAAQC,IAAIH,GAEV1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+CACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gCAEfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,SACEC,UAAU,uDACVQ,KAAK,SACLmB,YAAY,8BACZC,MAAOL,EACPb,SAAUc,KAGd3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,yBAAyBQ,KAAK,UAAhD,eC4EGqB,6MAxFbC,MAAQ,CACNd,KAAM,GACNe,aAAc,GACdR,WAAY,MAMdN,eAAiB,SAAAL,GACf,OAAmE,IAA5DoB,EAAKF,MAAMC,aAAaZ,IAAI,SAAA3B,GAAG,OAAIA,EAAIoB,KAAIqB,QAAQrB,MAQ5DsB,uBAAyB,SAAA1C,GAEnBwC,EAAKf,eAAezB,EAAIoB,IAC1BoB,EAAKG,SAAS,SAAAC,GAAS,MAAK,CAC1BL,aAAcK,EAAUL,aAAaM,OAAO,SAAAC,GAAI,OAAIA,EAAK1B,KAAOpB,EAAIoB,QAItEoB,EAAKG,SAAS,SAAAC,GAAS,MAAK,CAC1BL,aAAY,GAAAQ,OAAAC,OAAAC,EAAA,EAAAD,CAAMJ,EAAUL,cAAhB,CAA8BvC,UAQhDkD,qBAAuB,SAAAC,GACrBA,EAAGC,iBACHZ,EAAKG,SAAS,CAAEZ,WAAYoB,EAAGE,OAAOjB,QAEtCkB,MAIE,oIAECC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAE,GACJjB,EAAKG,SAAS,CAAEnB,KAAMiC,EAAKC,SAE5BC,MAAM,SAAAC,GAAK,OAAI3B,QAAQC,IAAI0B,yFAGZ,IAAAC,EAAAC,KAKlBR,MACE,4FAECC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAE,GACJI,EAAKlB,SAAS,CAAEnB,KAAMiC,EAAKC,SAE5BC,MAAM,SAAAC,GAAK,OAAI3B,QAAQC,IAAI0B,sCAI9B,OACEvD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mCACbH,EAAAC,EAAAC,cAACwD,EAAD,CACEhC,WAAY+B,KAAKxB,MAAMP,WACvBC,eAAgB8B,KAAKZ,wBAGzB7C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACyD,EAAD,CACExC,KAAMsC,KAAKxB,MAAMd,KACjBC,eAAgBqC,KAAKrC,eACrBC,mBAAoBoC,KAAKpB,kCAjFnBuB,aCHlBC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.b503224e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport propTypes from \"prop-types\";\r\n\r\nconst GiftItem = ({ gif, inCollection, toggleCollection }) => {\r\n\r\n  const label = inCollection ? \"Remove from MyCollection\" : \"Add to MyCollection\";\r\n  const labelClass = inCollection ? \"btn btn-outline-danger active btn-block\" : \"btn btn-success btn-block\";\r\n  \r\n  \r\n  return (\r\n    <div className=\"card mb-4 shadow-sm\">\r\n      <img\r\n        className=\"card-img-top img-fluid\"\r\n        src={gif.images.fixed_width.url}\r\n        alt={gif.title}\r\n        title={gif.title}\r\n      />\r\n      <div className=\"card-body\">      \r\n        <div className=\"btn-group-toggle\" data-toggle=\"buttons\">\r\n          <label className={labelClass} >\r\n            <input\r\n              type=\"checkbox\"       \r\n              checked={inCollection}\r\n              onChange={toggleCollection}\r\n              \r\n            /> \r\n            {label}\r\n          </label>\r\n        </div>\r\n      </div>\r\n      <ul className=\"list-group list-group-flush\">\r\n        {gif.username ? (\r\n          <li className=\"list-group-item\">\r\n            <strong>Username:</strong> {gif.username}\r\n          </li>\r\n        ) : null}\r\n\r\n        <li className=\"list-group-item\">\r\n          <strong>ID:</strong> {gif.id} | <strong>Rating:</strong> {gif.rating}\r\n        </li>\r\n        <li className=\"list-group-item\">\r\n          <strong>Import_datetime:</strong> {gif.import_datetime}\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nGiftItem.propTypes = {\r\n  gif: propTypes.object.isRequired,\r\n  inCollection: propTypes.bool.isRequired,\r\n  toggleCollection: propTypes.func.isRequired\r\n};\r\n\r\nexport default GiftItem;\r\n","import React from \"react\";\r\nimport GifItem from \"./GifItem\";\r\nimport propTypes from \"prop-types\";\r\n\r\nconst GiftList = ({ gifs, isInCollection, onToggleCollection }) => {\r\n  return (\r\n    \r\n      <div className=\"card-columns\">\r\n        {gifs.map(gif => (\r\n          <GifItem\r\n            key={gif.id}\r\n            gif={gif}\r\n            inCollection={isInCollection(gif.id)}\r\n            toggleCollection={() => onToggleCollection(gif)}\r\n          />\r\n        ))}\r\n      </div>\r\n  \r\n  );\r\n};\r\n\r\nGiftList.propTypes = {\r\n  gifs: propTypes.arrayOf(propTypes.object),\r\n  isInCollection: propTypes.func.isRequired,\r\n  onToggleCollection: propTypes.func.isRequired\r\n};\r\n\r\nexport default GiftList;\r\n","import React from \"react\";\r\nimport propTypes from \"prop-types\";\r\n\r\nconst SearchBar = ({ searchTerm, onSearchChange }) => {\r\n  console.log(searchTerm);\r\n  return (\r\n    <div className=\"col-12 col-md-10 col-lg-8\">\r\n      <form className=\"card card-sm\">\r\n        <div className=\"card-body row no-gutters align-items-center\">\r\n          <div className=\"col-auto\">\r\n            <i className=\"fas fa-search h3 text-body\" />\r\n          </div>\r\n          <div className=\"col\">\r\n            <input\r\n              className=\"form-control form-control-lg form-control-borderless\"\r\n              type=\"search\"\r\n              placeholder=\"Search for something funny!\"\r\n              value={searchTerm}\r\n              onChange={onSearchChange}\r\n            />\r\n          </div>\r\n          <div className=\"col-auto\">\r\n            <button className=\"btn btn-lg btn-success\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nSearchBar.propTypes = {\r\n  onSearchChange: propTypes.func.isRequired,\r\n  searchTerm: propTypes.string.isRequired\r\n};\r\n\r\nexport default SearchBar;\r\n","/**\r\n * API Docs: https://developers.giphy.com/docs/\r\n * api_key=JU6K8LiJFWg6ububq0idHxB0yo7IBEXI\r\n */\r\n\r\nimport React, { Component } from \"react\";\r\nimport GifList from \"./components/GifList\";\r\nimport SearchBar from \"./components/SearchBar\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    gifs: [],\r\n    myCollection: [],\r\n    searchTerm: \"\"\r\n  };\r\n\r\n  /**\r\n   * Checks if a gif's ID is in Mycollection\r\n   */\r\n  isInCollection = id => {\r\n    return this.state.myCollection.map(gif => gif.id).indexOf(id) === -1\r\n      ? false\r\n      : true;\r\n  };\r\n\r\n  /**\r\n   * If the checkbox changes, the gif is added or removed from MyCollection\r\n   */\r\n  handleToggleCollection = gif => {\r\n    // remove\r\n    if (this.isInCollection(gif.id)) {\r\n      this.setState(prevState => ({\r\n        myCollection: prevState.myCollection.filter(item => item.id !== gif.id)\r\n      }));\r\n    } else {\r\n      // add\r\n      this.setState(prevState => ({\r\n        myCollection: [...prevState.myCollection, gif]\r\n      }));\r\n    }\r\n  };\r\n\r\n  /**\r\n   * When the serch term changes, fetches for a new set gifs\r\n   */\r\n  handleOnSearchChange = ev => {\r\n    ev.preventDefault();\r\n    this.setState({ searchTerm: ev.target.value });\r\n\r\n    fetch(\r\n      // `https://api.giphy.com/v1/search?api_key=JU6K8LiJFWg6ububq0idHxB0yo7IBEXI&q=${\r\n      //   ev.target.value\r\n      // }&limit=10`\r\n      'https://api.giphy.com/v1/gifs/search?api_key=JU6K8LiJFWg6ububq0idHxB0yo7IBEXI&q=cheeseburgers&limit=12&offset=0&rating=G&lang=en'\r\n    )\r\n      .then(res => res.json())\r\n      .then(json => {\r\n        this.setState({ gifs: json.data });\r\n      })\r\n      .catch(error => console.log(error));\r\n  };\r\n\r\n  componentDidMount() {\r\n    /**\r\n     * Populates Show Images with default data (without search) - trending gifs\r\n     * https://api.giphy.com/v1/gifs/trending?api_key=JU6K8LiJFWg6ububq0idHxB0yo7IBEXI\r\n     */\r\n    fetch(\r\n      \"https://api.giphy.com/v1/gifs/trending?api_key=JU6K8LiJFWg6ububq0idHxB0yo7IBEXI&limit=12\"\r\n    )\r\n      .then(res => res.json())\r\n      .then(json => {\r\n        this.setState({ gifs: json.data });\r\n      })\r\n      .catch(error => console.log(error));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row justify-content-center my-3\">\r\n          <SearchBar\r\n            searchTerm={this.state.searchTerm}\r\n            onSearchChange={this.handleOnSearchChange}\r\n          />\r\n        </div>\r\n        <div className=\"row\">\r\n          <GifList\r\n            gifs={this.state.gifs}\r\n            isInCollection={this.isInCollection}\r\n            onToggleCollection={this.handleToggleCollection}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}